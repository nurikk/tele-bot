---
  name: Terraform Cloud Speculative Run
  
  on:
    pull_request:
      branches:

        - master
      paths:
        - 'terraform/**.tf'
  

  env:
    TF_CLOUD_ORGANIZATION: "nurikodd"
    TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
    TF_WORKSPACE: "tele-bot"
    CONFIG_DIRECTORY: "./terraform/" ## Directory of your Terraform Configuration. Relative to the project root.

    TF_LOG: DEBUG ## Helpful for troubleshooting
    # TF_MAX_TIMEOUT: "30m" ## If you wish to override the default "1h"
  
  jobs:
    terraform-cloud-speculative-run:
      runs-on: ubuntu-latest
      ## OPTIONAL: can scope variables to this specific job
      ## Example:
      # env:
      #  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORG }}
      steps:
        - uses: actions/checkout@v3
  
        - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.1.1
          id: upload
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            directory: ${{ env.CONFIG_DIRECTORY }}
            speculative: true
  
        - uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
          id: run
          ## run may fail, if so continue to output PR comment
          ## step.terraform-cloud-check-run-status will fail job after pr comment is created/updated.
          continue-on-error: true
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
            plan_only: true
            ## OPTIONAL: set your own message for run. A default message will be defined for you.
            ## Example:
            # message: "Triggered From GitHub Actions CI ${{ github.sha }}"
  
        - uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.1.1
          id: plan-output
          with:
            plan: ${{ steps.run.outputs.plan_id }}
  
        ## REQUIRED: Workflow permissions: `Read and write permissions`
        - uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
              })
              const output = `#### Terraform Cloud Plan Output
                 \`\`\`\n
                 Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                 \`\`\`
                 [Terraform Cloud Plan](${{ steps.run.outputs.run_link }})
                 `
              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
  
          ## Check Run Status, if not planned_and_finished fail the job
        - id: terraform-cloud-check-run-status
          if: ${{ steps.run.outputs.run_status != 'planned_and_finished'}}
          run: |
            echo "Terraform Cloud Run Failed or Requires Further Attention"
            echo "Run Status: '${{ steps.run.outputs.run_status }}'"
            echo "${{ steps.run.outputs.run_link }}"
            exit 1